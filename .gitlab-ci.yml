stages:
  - test
  - build
  - staging
  - production

default:
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://gitlab.parity.io
  interruptible:                   true
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure

variables:
  KUBE_NAMESPACE:                  "matrix-admin-bot"
  CI_REGISTRY:                     "docker.io/paritytech"
  GIT_STRATEGY:                    fetch
  CI_IMAGE:                        "node:16.10-alpine"
  # BUILDAH_IMAGE is defined in group variables
  BUILDAH_COMMAND:                 "buildah --storage-driver overlay2"
  DOCKERHUB_REPO:                  "paritytech"
  IMAGE_NAME:                      docker.io/$DOCKERHUB_REPO/matrix-admin-bot
  DOCKER_TAG:                      "${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}"
  VAULT_ADDR:                      "https://vault.parity-mgmt-vault.parity.io"
  VAULT_AUTH_PATH:                 "gitlab-parity-io-jwt-oidc"
  VAULT_AUTH_ROLE:                 "gitlab_oidc_${CI_PROJECT_NAME}"

.common-refs:                      &common-refs
  rules:
    - if: $CI_COMMIT_REF_NAME == "master"
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/                         # PRs

.test-refs:                        &test-refs
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/                         # PRs

# Publish docker image and deploy it on staging on tag or on push in master
.publish-deploy-refs:              &publish-deploy-refs
  rules:
    - if: $CI_COMMIT_REF_NAME == "master"                           # on commits to main branch
    - if: $CI_COMMIT_REF_NAME =~ /^v[0-9]+\.[0-9]+.*$/              # on tags (i.e. v1.0, v2.1rc1)

# Deploy on production goes only on tag
.deploy-prod-refs:                 &deploy-prod-refs
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^v[0-9]+\.[0-9]+.*$/              # on tags (i.e. v1.0, v2.1rc1)

.kubernetes-env:                   &kubernetes-env
  image:                           $CI_IMAGE
  tags:
    - kubernetes-parity-build

# template task for building and pushing an image
.build-push-docker-image:          &build-push-docker-image
  image:                           $BUILDAH_IMAGE
  script:
    - test "$Docker_Hub_User_Parity" -a "$Docker_Hub_Pass_Parity" ||
      ( echo "no docker credentials provided"; exit 1 )
    - $BUILDAH_COMMAND build
      --format=docker
      --build-arg VCS_REF="${CI_COMMIT_SHA}"
      --build-arg BUILD_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
      --build-arg VERSION="${DOCKER_TAG}"
      --build-arg PROJECT_NAME="${CI_PROJECT_NAME}"
      --tag "$IMAGE_NAME:${DOCKER_TAG}"
      --tag "$IMAGE_NAME:latest"
      --file "$DOCKERFILE" .
    - echo "$Docker_Hub_Pass_Parity" |
      buildah login --username "$Docker_Hub_User_Parity" --password-stdin docker.io
    - $BUILDAH_COMMAND info
    - $BUILDAH_COMMAND push --format=v2s2 "$IMAGE_NAME:${DOCKER_TAG}"
    - $BUILDAH_COMMAND push --format=v2s2 "$IMAGE_NAME:latest"
  after_script:
    - buildah logout --all

# test that docker image can build

.build-only-docker-image:          &build-only-docker-image
  image:                           $BUILDAH_IMAGE
  script:
    - $BUILDAH_COMMAND build
      --format=docker
      --build-arg VCS_REF="${CI_COMMIT_SHA}"
      --build-arg BUILD_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
      --build-arg PROJECT_NAME="${CI_PROJECT_NAME}"
      --tag "$IMAGE_NAME:latest"
      --file "$DOCKERFILE" .

check-linting:
  stage:                           test
  <<:                              *common-refs
  <<:                              *kubernetes-env
  script:
    - apk update && apk add --no-cache git
    - yarn --immutable
    - yarn lint

build-docker-bot:
  stage:                           build
  <<:                              *test-refs
  <<:                              *kubernetes-env
  <<:                              *build-only-docker-image
  variables:
    DOCKERFILE:                    "Dockerfile"


publish-docker-bot:
  stage:                           build
  <<:                              *publish-deploy-refs
  <<:                              *kubernetes-env
  <<:                              *build-push-docker-image
  variables:
    DOCKERFILE:                    "Dockerfile"

push-docker-image-description:
  stage:                           build
  <<:                              *kubernetes-env
  variables:
    CI_IMAGE:                      paritytech/dockerhub-description
    DOCKERHUB_REPOSITORY:          $DOCKERHUB_REPO/$KUBE_NAMESPACE
    DOCKER_USERNAME:               $Docker_Hub_User_Parity
    DOCKER_PASSWORD:               $Docker_Hub_Pass_Parity
    README_FILEPATH:               $CI_PROJECT_DIR/Dockerfile.README.md
    SHORT_DESCRIPTION:             "Bot to keep the matrix channels maintainable and bulk invite new users to the channels"
  rules:
    - if: $CI_COMMIT_REF_NAME == "master"
      changes:
      - Dockerfile.README.md
  script:
    - cd / && sh entrypoint.sh

#### stage:                        deploy

.deploy:                           &deploy-k8s
  variables:
    CI_IMAGE: quay.io/argoproj/argocd:v2.7.9
    ARGOCD_OPTS: --grpc-web --grpc-web-root-path /$ENVIRONMENT
    APP: matrix-admin-bot
  environment:
    name: $ENVIRONMENT
  script:
    - argocd app list
    - argocd app set $APP --helm-set common.image.tag="$DOCKER_TAG"
    - argocd app sync $APP
    - argocd app wait $APP --timeout 300


deploy-stg:
  stage:                           staging
  extends:                         .deploy
  <<:                              *kubernetes-env
  <<:                              *publish-deploy-refs
  variables:
    ENVIRONMENT:                   parity-stg

deploy-prod:
  stage:                           production
  extends:                         .deploy
  <<:                              *kubernetes-env
  <<:                              *deploy-prod-refs
  variables:
    ENVIRONMENT:                   parity-prod
